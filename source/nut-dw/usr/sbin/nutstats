#!/bin/bash
#
# Copyright Derek Macias
# Copyright macester
# Copyright gfjardim
# Copyright SimonF
# Copyright desertwitch
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#

STATROOT="/etc/nutstats"

if [ ! -d $STATROOT ]; then 
      echo "NUTSTATS: NUT Statistics Folder does not exist (yet)... exiting"
      exit 0
fi

CONFIG=$STATROOT/nut-dw.cfg

[ -e "$CONFIG" ] && source $CONFIG

if [ "$STATISTICS" == "disable" ]; then
      echo "NUTSTATS: NUT Runtime Statistics Module is disabled... exiting"
      exit 0
fi

if [ "$SERVICE" == "disable" ]; then
      echo "NUTSTATS: NUT Service is disabled... exiting"
      exit 0
fi

if /usr/bin/pgrep upsmon >/dev/null 2>&1; then
      echo "NUTSTATS: Service checks finished, starting to collect statistics..."
else
      echo "NUTSTATS: NUT upsmon is not (yet) running... exiting"
      exit 0
fi

epochMS=$( /usr/bin/date +%s%3N )
monitorVars=("ups.realpower" "battery.charge" "battery.voltage" "input.voltage" "input.frequency" "output.voltage" "output.frequency")

if [ "$STATSOVERRIDE" == "enable" ]; then
      echo "NUTSTATS: UPS variable override is active..."
      echo "NUTSTATS: Testing configured UPS override variables..."

      variableTestSuccess=true
      monitorVarsOR=("${STATSCHART1VAR}" "${STATSCHART2VAR}" "${STATSCHART3VAR}" "${STATSCHART4VAR}" "${STATSCHART5VAR}" "${STATSCHART6VAR}" "${STATSCHART7VAR}")

      for i in "${monitorVarsOR[@]}"; do
            if [ -z "${i// }" ]; then
                  variableTestSuccess=false
            fi
      done

      if [ "$variableTestSuccess" = true ] ; then
            echo "NUTSTATS: Testing configured UPS variables passed, using values..."
            monitorVars=("${STATSCHART1VAR}" "${STATSCHART2VAR}" "${STATSCHART3VAR}" "${STATSCHART4VAR}" "${STATSCHART5VAR}" "${STATSCHART6VAR}" "${STATSCHART7VAR}")
      else
            echo "NUTSTATS: Testing configured UPS variables did not pass, using defaults..."
      fi
fi


for monitorVar in "${monitorVars[@]}"
do
      if [ ! "$monitorVar" == "disable" ] ; then
            upsVar="$( /usr/bin/upsc "$NAME"@"$IPADDR" "$monitorVar" 2>/dev/null )"
            if [ -n "$upsVar" ]; then
                  newJson="$(/usr/bin/jq --arg jq_upsVar "${upsVar}" --arg jq_epochMS "${epochMS}" '.data[.data| length] |= . + { "x": $jq_epochMS|tonumber, "y": $jq_upsVar|tonumber, }' $STATROOT/"$monitorVar".json 2>/dev/null)"
                  if [ -n "$newJson" ]; then
                        echo "$newJson" > $STATROOT/"$monitorVar".json.new
                        rm -f $STATROOT/"$monitorVar".json
                        mv -f $STATROOT/"$monitorVar".json.new $STATROOT/"$monitorVar".json
                        echo "NUTSTATS: Updated ${monitorVar}.json"
                  else
                        echo "NUTSTATS: Error Updating ${monitorVar}.json - Malformed JSON (non-numeric value configured?)"
                  fi
            else
            echo "NUTSTATS: Error Updating ${monitorVar}.json - UPS returned BAD or NULL value."
            fi
      else
            echo "NUTSTATS: Skipping a user-disabled variable..."
      fi
done
